trigger:
 - main

pool:
   vmImage: 'ubuntu-20.04'

variables:
- group: prueba_variables

steps:


- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      npm install -g @angular/cli
  displayName: 'Install Angular CLI'

- script: ng config -g cli.warnings.versionMismatch false
  displayName: 'Disable Angular CLI version mismatch warning'

- task: Npm@1
  inputs:
    command: 'install'
    workingDir: '$(System.DefaultWorkingDirectory)/frontend/angular-app'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      ng build --configuration=production

    workingDirectory: '$(System.DefaultWorkingDirectory)/frontend/angular-app'

- task: PublishBuildArtifacts@1
  inputs:
    artifactName: 'dist'
    pathtoPublish: '$(System.DefaultWorkingDirectory)/frontend/angular-app/dist'

- task: S3Upload@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: 'us-east-1'
    bucketName: '$(bucket-front-code-name)'
    sourceFolder: '$(System.DefaultWorkingDirectory)/frontend/angular-app/dist/angular-app'
    globExpressions: '**'

- script: |
    sudo apt-get install zip -y
    cd $(System.DefaultWorkingDirectory)/backend/
    zip -r $(Build.StagingDirectory)/backend.zip .
  displayName: 'Compress backend folder into zip'


- task: S3Upload@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: 'us-east-1'
    bucketName: '$(bucket-source-code)'
    sourceFolder: '$(Build.StagingDirectory)'
    globExpressions: 'backend.zip'

- task: LambdaDeployFunction@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: 'us-east-1'
    deploymentMode: 'codeonly'
    functionName: '$(getFuctionName)'
    codeLocation: 's3object'
    s3Bucket: '$(bucket-source-code)'
    s3ObjectKey: '$(objectName)'

- task: LambdaDeployFunction@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: 'us-east-1'
    deploymentMode: 'codeonly'
    functionName: '$(postFunctionName)'
    codeLocation: 's3object'
    s3Bucket: '$(bucket-source-code)'
    s3ObjectKey: '$(objectName)'

- task: LambdaDeployFunction@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: 'us-east-1'
    deploymentMode: 'codeonly'
    functionName: '$(deleteFunctionName)'
    codeLocation: 's3object'
    s3Bucket: '$(bucket-source-code)'
    s3ObjectKey: '$(objectName)'

- task: LambdaDeployFunction@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: 'us-east-1'
    deploymentMode: 'codeonly'
    functionName: '$(putFunctionName)'
    codeLocation: 's3object'
    s3Bucket: '$(bucket-source-code)'
    s3ObjectKey: '$(objectName)'