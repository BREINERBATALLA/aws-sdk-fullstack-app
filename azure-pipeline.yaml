trigger:
 - main

pool:
   vmImage: 'ubuntu-20.04'

variables:
- group: context

steps:

- task: SystemsManagerGetParameter@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    readMode: 'single'
    parameterName: 'bucketNameCloudFront'
    parameterVersion: '1'

- task: SystemsManagerGetParameter@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    readMode: 'single'
    parameterName: 'bucketNameCode'
    parameterVersion: '1'

- task: SystemsManagerGetParameter@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    readMode: 'single'
    parameterName: 'objectName'
    parameterVersion: '1'

- task: SystemsManagerGetParameter@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    readMode: 'single'
    parameterName: 'postFunctionName'
    parameterVersion: '1'

- task: SystemsManagerGetParameter@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    readMode: 'single'
    parameterName: 'putFunctionName'
    parameterVersion: '1'
- task: SystemsManagerGetParameter@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    readMode: 'single'
    parameterName: 'getFunctionName'
    parameterVersion: '1'

- task: SystemsManagerGetParameter@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    readMode: 'single'
    parameterName: 'deleteFunctionName'
    parameterVersion: '1'

- script: |
    echo '$(deleteFunctionName)'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      npm install -g @angular/cli
  displayName: 'Install Angular CLI'

- script: ng config -g cli.warnings.versionMismatch false
  displayName: 'Disable Angular CLI version mismatch warning'

- task: Npm@1
  inputs:
    command: 'install'
    workingDir: '$(System.DefaultWorkingDirectory)/frontend/angular-app'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      ng build --configuration=production
    workingDirectory: '$(System.DefaultWorkingDirectory)/frontend/angular-app'

- task: S3Upload@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    bucketName: '$(bucketNameCloudFront)'
    sourceFolder: '$(System.DefaultWorkingDirectory)/frontend/angular-app/dist/angular-app'
    globExpressions: '**'

- script: |
    sudo apt-get install zip -y
    cd $(System.DefaultWorkingDirectory)/backend/
    zip -r $(Build.StagingDirectory)/$(objectName) .
  displayName: 'Compress backend folder into zip'


- task: S3Upload@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: 'us-east-1'
    bucketName: '$(bucketNameCode)'
    sourceFolder: '$(Build.StagingDirectory)'
    globExpressions: '$(objectName)'

- task: LambdaDeployFunction@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    deploymentMode: 'codeonly'
    functionName: '$(getFuctionName)'
    codeLocation: 's3object'
    s3Bucket: '$(bucketNameCode)'
    s3ObjectKey: '$(objectName)'

- task: LambdaDeployFunction@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    deploymentMode: 'codeonly'
    functionName: '$(postFunctionName)'
    codeLocation: 's3object'
    s3Bucket: '$(bucketNameCode)'
    s3ObjectKey: '$(objectName)'

- task: LambdaDeployFunction@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    deploymentMode: 'codeonly'
    functionName: '$(deleteFunctionName)'
    codeLocation: 's3object'
    s3Bucket: '$(bucketNameCode)'
    s3ObjectKey: '$(objectName)'

- task: LambdaDeployFunction@1
  inputs:
    awsCredentials: 'AWSConnection'
    regionName: '$(region)'
    deploymentMode: 'codeonly'
    functionName: '$(putFunctionName)'
    codeLocation: 's3object'
    s3Bucket: '$(bucketNameCode)'
    s3ObjectKey: '$(objectName)'